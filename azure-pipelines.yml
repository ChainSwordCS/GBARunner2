# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

variables:
  DEVKITPRO: $(Agent.TempDirectory)\bar\devkitPro
  DEVKITARM: $(Agent.TempDirectory)\bar\devkitPro\devkitARM
  PATH: C:\agents\2.153.2\externals\git\cmd;C:/hostedtoolcache/windows\Python\3.6.8\x64;C:/hostedtoolcache/windows\Python\3.6.8\x64\Scripts;C:\Program Files\Mercurial\;C:\vcpkg;C:\cf-cli;C:\Program Files (x86)\NSIS\;C:\Program Files\Mercurial\;C:\Program Files\Boost\1.69.0;C:\Users\VssAdministrator\.dotnet\tools;C:\Program Files\dotnet;C:\mysql-5.7.21-winx64\bin;C:\Program Files\Java\zulu-8-azure-jdk_8.38.0.13-8.0.212-win_x64\bin;C:\npm\prefix;C:\Program Files\Rust\.cargo\bin;C:\hostedtoolcache\windows\Ruby\2.5.3\x64\bin;C:\Go1.12.4\bin;C:\Program Files\Git\bin;C:\Program Files\Git\usr\bin;C:\Program Files\Git\mingw64\bin;C:\hostedtoolcache\windows\Python\3.7.2\Scripts;C:\hostedtoolcache\windows\Python\3.7.2;C:\Program Files (x86)\Microsoft SDKs\Azure\CLI2\wbin;C:\windows\system32;C:\windows;C:\windows\System32\Wbem;C:\windows\System32\WindowsPowerShell\v1.0\;C:\windows\System32\OpenSSH\;C:\ProgramData\Chocolatey\bin;C:\Program Files\Docker;C:\Program Files\PowerShell\6\;C:\Program Files\dotnet\;C:\Program Files\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\170\Tools\Binn\;C:\Program Files (x86)\Windows Kits\10\Windows Performance Toolkit\;C:\Program Files\Microsoft Service Fabric\bin\Fabric\Fabric.Code;C:\Program Files\Microsoft SDKs\Service Fabric\Tools\ServiceFabricLocalClusterManager;C:\Program Files\Git\cmd;C:\Program Files\Git\mingw64\bin;C:\Program Files\Git\usr\bin;c:\tools\php;C:\Program Files (x86)\Subversion\bin;C:\Program Files\nodejs\;C:\Program Files\CMake\bin;C:\Strawberry\c\bin;C:\Strawberry\perl\site\bin;C:\Strawberry\perl\bin;C:\Program Files\OpenSSL\bin;C:\Users\VssAdministrator\AppData\Local\Microsoft\WindowsApps;$(DEVKITPRO)\msys\bin

trigger:
- master

pool:
  vmImage: 'windows-latest'

steps:
- task: DownloadSecureFile@1
  inputs:
    secureFile: 'devkitPro.zip.001'

- task: DownloadSecureFile@1
  inputs:
    secureFile: 'devkitPro.zip.002'

- task: DownloadSecureFile@1
  inputs:
    secureFile: 'devkitPro.zip.003'

- task: DownloadSecureFile@1
  inputs:
    secureFile: 'devkitPro.zip.004'

- script: |
    cd $(Agent.TempDirectory)
    copy /b *.zip.00* newzip.zip
    powershell.exe -nologo -noprofile -command "& { Add-Type -A 'System.IO.Compression.FileSystem'; [IO.Compression.ZipFile]::ExtractToDirectory('newzip.zip', 'bar'); }"
    cd $(Build.Repository.LocalPath)
    md build
  displayName: 'Prepare environment'

- script: |
    cd $(Build.Repository.LocalPath)
    make
    copy GBARunner2.nds build\GBARunner2_arm9dldi.nds
  displayName: 'Build arm9dldi'

- script: |
    cd $(Build.Repository.LocalPath)
    make build ENABLE_WRAM_ICACHE=1
    copy GBARunner2.nds build\GBARunner2_arm9dldi_wramicache.nds
  displayName: 'Build arm9dldi_wramicache'

- script: |
    cd $(Build.Repository.LocalPath)
    make build ARM7_DLDI=1
    copy GBARunner2.nds build\GBARunner2_arm7dldi.nds
  displayName: 'Build arm7dldi'

- script: |
    cd $(Build.Repository.LocalPath)
    make build ARM7_DLDI=1 ENABLE_WRAM_ICACHE=1
    copy GBARunner2.nds build\GBARunner2_arm7dldi_wramicache.nds
  displayName: 'Build arm7dldi_wramicache'

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.Repository.LocalPath)\\build'
    artifact: 'GBARunner2 Build'